on:
  workflow_call:
    # Input variables
    inputs:
      # General settings
      working-directory:
        description: 'Working directory of this workflow'
        type: string
        default: .
      runs-on:
        description: 'Where should this job run'
        type: string
        default: self-hosted
      ignore-files:
        description: 'List of file to ignore (will be deleted before running steps)'
        type: string
        default: ""
      
      # Vault settings
      vault-export-token:
        description: 'Export vault-token as environemtn variable.'
        type: boolean
        default: true
      vault-role:
        description: 'Vault role to use for authentication'
        required: true
        type: string
      vault-serviceaccount-ttl:
        description: 'How long will ServiceAccount live'
        type: string
        default: "10m"
      vault-cluster-role-binding:
        description: 'Should this be a clusterrolebinding?'
        type: boolean
        default: false
      
      # Kubernetes settings
      kubernetes-cluster-name:
        description: 'Name of cluster in which ServiceAccount will be created'
        type: string
        required: true
      kubernetes-namespace:
        description: 'Name of namespace to create ServiceAccount'
        type: string
        required: true
      kubernetes-config-template:
        description: 'name of template file for kube-config file'
        type: string
        default: config.tmpl
      kubernetes-config:
        description: 'name of kube-config file'
        type: string
        default: config
      kubernetes-templating-script:
        description: 'Name of script used for templating config file'
        type: string
        default: templating.py
    
    # Output variables
    outputs:
      KUBE_CONFIG: 
        description: Config file for kubernetes
        value: ${{ jobs.vault.outputs.KUBE_CONFIG }}
      VAULT_TOKEN: 
        description: token from vault-auth step
        value: ${{ jobs.vault.outputs.VAULT_TOKEN }}

name: Vault
jobs:
  vault:
    name: Vault auth and retrival of secrets for kubernetes auth
    runs-on: ${{ inputs.runs-on }}
    outputs:
      KUBE_CONFIG: ${{ steps.k8s_creds.outputs.KUBE_CONFIG }}
      VAULT_TOKEN: ${{ steps.k8s_creds.outputs.VAULT_TOKEN }}
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v3

      # Delete ignored files inside repo before running.
      # Care is taken to prevent deletion of files outside
      # of the repository root.
      - name: Remove ignored files
        if: inputs.ignore-files != ''
        env:
          IGNORE_FILES: ${{ inputs.ignore-files }}
        shell: python
        working-directory: ${{ inputs.working-directory }}
        run: |
          import os
          import pathlib
          import shutil

          fpaths = os.getenv("IGNORE_FILES", "")
          for fpath in [s.strip() for s in fpaths.split(",") if s]:
            # Make sure we only delete files in repo root
            safe_dir = os.getcwd() + os.sep
            if not os.path.commonprefix((os.path.realpath(fpath),safe_dir)) == safe_dir:
              raise ValueError(f"Not allowed to delete path outside of repo root: {fpath}")

            # Delete path
            p = pathlib.Path(fpath)
            if p.is_file():
              p.unlink()
              print("deleted file:", p.name)
            elif p.is_dir():
              shutil.rmtree(p.name)
              print("deleted directory:", p.name)

      # Get version of workflow
      - name: Get workflow ref
        id: workflow_tag
        shell: bash
        run: |
          workflow_file="${GITHUB_WORKFLOW}"
          if ! [ -f "${workflow_file}" ]
          then
            workflow_file="$(grep -l "^.*name: ${GITHUB_WORKFLOW}$" .github/workflows/*)"
          fi
          workflow_tag="$(awk -F @ '/github-workflow-vault-github-kubernetes-auth/ {print $2}' "${workflow_file}")"
          echo "WORKFLOW_TAG=${workflow_tag}" >> $GITHUB_ENV
      
      # Checkout workflow to get templates
      - name: Checkout workflow
        id: checkout_workflow
        uses: actions/checkout@v3
        with:
          repository: nrkno/github-workflow-vault-github-kubernetes-auth
          ref: ${{ env.WORKFLOW_TAG }}
          path: .github-workflow-vault-github-kubernetes-auth
      
      # Copy config template from workflow
      - name: Set configuration
        id: set_config
        shell: bash
        env:
          KUBERNETES_TEMPLATING_SCRIPT: ${{ inputs.kubernetes-templating-script }}
          KUBERNETES_CONFIG_TEMPLATE: ${{ inputs.kubernetes-config-template }}
          KUBERNETES_CONFIG: ${{ inputs.kubernetes-config }}
        run: |
          if [ -f "$K8S_CONFIG_TEMPLATE" ]
          then
            echo "Using callers template for kube-config"
          else
            echo "Using workflow template for kube-config"
            cp -- "${GITHUB_WORKSPACE}/.github-workflow-vault-github-kubernetes-auth/templates/${KUBERNETES_CONFIG_TEMPLATE" "${KUBERNETES_CONFIG}"
            cp -- "${GITHUB_WORKSPACE}/.github-workflow-vault-github-kubernetes-auth/scrips/${KUBERNETES_TEMPLATING_SCRIPT}" "${KUBERNETES_TEMPLATING_SCRIPT}"
          fi
      
      # Cleanup workflow after copy
      - name: Remove workflow checkout
        shell: bash
        run: |
          rm -rf -- .github-workflow-terraform-config

      # Get secrets to authenticate to kubernetes
      - name: Get Cluster CA and API-host
        uses: hashicorp/vault-action@v2.4.3
        with:
          url: ${{ secrets.PLATTFORM_VAULT_URL }}
          role: ${{ inputs.vault-role }}
          method: jwt
          path: jwt-github
          exportToken: true
          secrets: |
            secret/applications/shared/kubernetes-config/${{ env.CLUSTER_NAME }} ca_cert | CLUSTER_CA_CERT ;
            secret/applications/shared/kubernetes-config/${{ env.CLUSTER_NAME }} host | CLUSTER_HOST ;

      # Get ServiceAccount for cluster aks-plattform-int-nonprod-weu
      - name: Get Kubernetes ServiceAccount for cluster aks-plattform-int-nonprod-weu
        id: k8s_creds
        if: inputs.get-k8s-creds
        shell: bash
        env:
          CLUSTER_NAME: ${{ inputs.kubernetes-cluster-name }}
          CLUSTER_NAMESPACE: ${{ inputs.kubernetes-namespace }}
          VAULT_EXPORT_TOKEN: ${{ inputs.vault-export-token }}
          VAULT_SA_TTL: ${{ inputs.vault-serviceaccount-ttl }}
          VAULT_ROLE: ${{ inputs.vault-role }}
          VAULT_CLUSTER_ROLE_BINDING: ${{ inputs.vault-cluster-role-binding }}
          KUBERNETES_CONFIG_TEMPLATE: ${{ inputs.kubernetes-config-template }}
          KUBERNETES_CONFIG: ${{ inputs.kubernetes-config }}
        run: |
          # Create payload with required fields for POST request to Vault
          jq --null-input \
          --arg cluster_namespace "${CLUSTER_NAMESPACE}" \
          --arg vault_cluster_role_binding "${VAULT_CLUSTER_ROLE_BINDING}" \
          --arg vault_sa_ttl "${VAULT_SA_TTL}" \
          '{ "kubernetes_namespace": $cluster_namespace, "cluster_role_binding": $vault_cluster_role_binding, "ttl": $vault_sa_ttl }' \
          > payload.json

          # Create ServiceAccount and get token and name for created ServiceAccount
          K8S_CREDS_REQUEST=$(curl --write-out '%{http_code}' -s -X POST -H "X-Vault-Token: ${VAULT_TOKEN}" --data @payload.json --output response.json "{{ '${{ secrets.PLATTFORM_VAULT_URL }}' }}/v1/kubernetes-${CLUSTER_NAME}/creds/${VAULT_ROLE}")
          if [[ "${K8S_CREDS_REQUEST}" == "200" ]]
          then
            SERVICE_ACCOUNT_NAME=$(cat response.json | jq -r '.data.service_account_name')
            SERVICE_ACCOUNT_TOKEN=$(cat response.json | jq -r '.data.service_account_token')
            shred -u response.json
          else
            echo "http_code: ${K8S_CREDS_REQUEST}. Retrival of kubernetes credentials failed"
            exit 1
          fi
          
          # Need CA to be base64 encoded
          CLUSTER_CA_CERT_B64=$(base64 -w 0 <<<${CLUSTER_CA_CERT})

          # To smooth the kubeconfig creation we use a template to create a config-file
          .github/scripts/templating.py \
          CLUSTER_NAME={{ '${CLUSTER_NAME}' }} \
          CLUSTER_NAMESPACE={{ '${CLUSTER_NAMESPACE}' }} \
          CLUSTER_HOST={{ '${CLUSTER_HOST}' }} \
          CLUSTER_CA_CERT="{{ '${CLUSTER_CA_CERT_B64}' }}" \
          SERVICE_ACCOUNT_NAME="{{ '${SERVICE_ACCOUNT_NAME}' }}" \
          SERVICE_ACCOUNT_TOKEN="{{ '${SERVICE_ACCOUNT_TOKEN}' }}" \
          < ${KUBERNETES_CONFIG_TEMPLATE} > ${KUBERNETES_CONFIG}

          # Feed the created file into environment variable KUBE_CONFIG
          echo 'KUBE_CONFIG<<EOF' >> $GITHUB_OUTPUT
          cat ${KUBERNETES_CONFIG} >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

          if [[ ${VAULT_EXPORT_TOKEN} == "true" ]]
          then
            echo "VAULT_TOKEN=${VAULT_TOKEN}" >> $GITHUB_OUTPUT
          else
            echo "VAULT_TOKEN=None" >> $GITHUB_OUTPUT
          fi
          
          # Remove created files before continuing
          shred -u config payload.json
